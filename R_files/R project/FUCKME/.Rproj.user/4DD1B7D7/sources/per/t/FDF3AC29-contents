##Photosynthesis and Respiration code

rm(list=ls())

##Install packages
if ("devtools" %in% rownames(installed.packages()) == 'FALSE') install.packages('devtools') 
library(devtools)
if ("segmented" %in% rownames(installed.packages()) == 'FALSE') install.packages('segmented') 
if ("plotrix" %in% rownames(installed.packages()) == 'FALSE') install.packages('plotrix') 
if ("gridExtra" %in% rownames(installed.packages()) == 'FALSE') install.packages('gridExtra') 
if ("LoLinR" %in% rownames(installed.packages()) == 'FALSE') install_github('colin-olito/LoLinR') 
if ("lubridate" %in% rownames(installed.packages()) == 'FALSE') install.packages('lubridate') 
if ("chron" %in% rownames(installed.packages()) == 'FALSE') install.packages('chron') 
if ("plyr" %in% rownames(installed.packages()) == 'FALSE') install.packages('plyr') 
if ("dplyr" %in% rownames(installed.packages()) == 'FALSE') install.packages('dplyr') 

#Read in required libraries

##### Include Versions of libraries
#install_github('colin-olito/LoLinR')
library("ggplot2")
library("segmented")
library("plotrix")
library("gridExtra")
library("LoLinR")
library("lubridate")
library("chron")
library('plyr')
library('dplyr')
library('tidyverse')


# get the file path
#setwd("C:/Users/gould054/Documents/TPC_BDA")

setwd("C:/Users/Kate/OneDrive - University of North Carolina at Chapel Hill/June 2019")
getwd()

#path.p<-"C:/Users/gould054/Documents/TPC_BDA/Raw_R" #the location of all your respirometry files

path.p<-"C:/Users/Kate/OneDrive - University of North Carolina at Chapel Hill/June 2019/Raw_R" #the location of all your respirometry files

# bring in the respiration files
file.names<-basename(list.files(path = path.p, pattern = "csv$", recursive = TRUE)) #list all csv file names in the folder and subfolders

#basename above removes the subdirectory name from the file
file.names.full<-list.files(path = path.p, pattern = "csv$", recursive = TRUE) 

#generate a 3 column dataframe with specific column names
Photo.R<- data.frame(matrix(NA, nrow=length(file.names)*2, ncol=4))
colnames(Photo.R) <- c("fragment.ID.full","Intercept", "umol.L.sec","Temp.C")
View(Photo.R)

#Load Sample Info 
library(readxl)
#Sample.Info <- read_excel("~/TPC_BDA/resp_data_TT2.xlsx")#read in sample.info data
#View(Sample.Info)
#
Sample.Info <- read_excel("C:/Users/Kate/OneDrive - University of North Carolina at Chapel Hill/June 2019/TPC_RawData/Sample.Info.xlsx")#read in sample.info data
View(Sample.Info)


# load surface area data
library(readxl)
#SA <- read_excel("~/TPC_BDA/sample_data_TT.xlsx") #read sample.info data
#View(SA)
SA <- read_excel("C:/Users/Kate/OneDrive - University of North Carolina at Chapel Hill/June 2019/TPC_RawData/SA.xlsx") #read sample.info data
View(SA)

#Calculate the volume of water
as.numeric(SA$volume.mls)

View(SA)

# joint the sample info and surface area and volume measurements
Sample.Info<-left_join(Sample.Info, SA)

View(Sample.Info)

Sample.Info$date<-NULL
# for every file in list calculate O2 uptake or release rate and add the data to the Photo.R dataframe
for(i in 1:length(file.names.full)) { # for every file in list calculate O2 uptake or release rate and add the data to the Photo.R dataframe
  
  #find the lines in sample info that have the same file name that is being brought it
  FRow<-which(Sample.Info$fragment.ID.full==strsplit(file.names[i],'.csv'))
  # read in the O2 data one by one
  Photo.Data1 <-read.csv(file.path(path.p,file.names.full[i]), header=T) # skips the first line
  Photo.Data1 <-plyr::rename(Photo.Data1, c("Date"="Time","Oxygen"= "Value","Temperature"="Temp"))
  #rename columns 
  Photo.Data1  <- Photo.Data1[,c("Time","Value","Temp")] #subset columns of interest
  # Photo.Data1$Time <-strptime(Photo.Data1$Time, format = "%H:%M:%S") 
  Photo.Data1$Time <- strftime(Photo.Data1$Time, format = "%H:%M:%S") 
  #Photo.Data1$Time <- as.POSIXct(Photo.Data1$Time,format="%H:%M:%S", tz = "") #convert time from character to time
  Photo.Data1 <- na.omit(Photo.Data1)
  
  
  # clean up some of the data
  n<-dim(Photo.Data1)[1] # length of full data
  Photo.Data1 <-Photo.Data1[240:(n-3),] #start at data point ~4 minute in to avoid excess noise from start of run and remove last 3 lines containing text
  n<-dim(Photo.Data1)[1] #list length of trimmed data
  Photo.Data1$sec <- (1:n) #set seconds by one from start to finish of run in a new column
  
  
  #Save plot prior to and after data thinning to make sure thinning is not too extreme
  rename <- sub(".csv","", file.names[i]) # remove all the extra stuff in the file name
  
  #pdf(paste0("C:/Users/gould054/Documents/TPC_BDA/AllDataAnalysis_Presens_TPC_params/TPC_params_estimates_Topt/Output",rename,"thinning.pdf")) # open the graphics device
  pdf(paste0("C:/Users/Kate/OneDrive - University of North Carolina at Chapel Hill/June 2019/TPC_2",rename,"thinning.pdf")) # open the graphics device
  
  par(omi=rep(0.3, 4)) #set size of the outer margins in inches
  par(mfrow=c(1,2)) #set number of rows and columns in multi plot graphic
  plot(Value ~ sec, data=Photo.Data1 , xlab='Time (seconds)', ylab=expression(paste(' O'[2],' (',mu,'mol/L)')), type='n', axes=FALSE) #plot (empty plot to fill) data as a function of time
  usr  <-  par('usr') # extract the size of the figure margins
  rect(usr[1], usr[3], usr[2], usr[4], col='grey90', border=NA) # put a grey background on the plot
  whiteGrid() # make a grid
  box() # add a box around the plot
  points(Photo.Data1 $Value ~ Photo.Data1 $sec, pch=16, col=transparentColor('dodgerblue2', 0.6), cex=1.1)
  axis(1) # add the x axis
  axis(2, las=1) # add the y-axis
  
  # Thin the data to make the code run faster
  Photo.Data.orig<-Photo.Data1#save original unthinned data
  Photo.Data1 <-  thinData(Photo.Data1 ,by=20)$newData1 #thin data by every 20 points for all the O2 values
  Photo.Data1$sec <- as.numeric(rownames(Photo.Data1 )) #maintain numeric values for time
  Photo.Data1$Temp<-NA # add a new column to fill with the thinned data
  Photo.Data1$Temp <-  thinData(Photo.Data.orig,xy = c(1,3),by=20)$newData1[,2] #thin data by every 20 points for the temp values
  
  # plot the thinned data
  plot(Value ~ sec, data=Photo.Data1 , xlab='Time (seconds)', ylab=expression(paste(' O'[2],' (',mu,'mol/L)')), type='n', axes=FALSE) #plot thinned data
  usr  <-  par('usr')
  rect(usr[1], usr[3], usr[2], usr[4], col='grey90', border=NA)
  whiteGrid()
  box()
  points(Photo.Data1 $Value ~ Photo.Data1 $sec, pch=16, col=transparentColor('dodgerblue2', 0.6), cex=1.1)
  axis(1)
  axis(2, las=1)
  ##Olito et al. 2017: It is running a bootstrapping technique and calculating the rate based on density
  #option to add multiple outputs method= c("z", "eq", "pc")
  Regs  <-  rankLocReg(xall=Photo.Data1$sec, yall=Photo.Data1$Value, alpha=0.5, method="pc", verbose=TRUE)  
  
  # add the regression data
  plot(Regs)
  dev.off()
  
  # fill in all the O2 consumption and rate data
  Photo.R[i,2:3] <- Regs$allRegs[1,c(4,5)] #inserts slope and intercept in the dataframe
  Photo.R[i,1] <- rename #stores the file name in the Date column
  Photo.R[i,4] <- mean(Photo.Data1$Temp, na.rm=T)  #stores the Temperature in the Temp.C column
  #Photo.R[i,5] <- PR[j] #stores stores whether it is photosynthesis or respiration
  
  
  # rewrite the file everytime... I know this is slow, but it will save the data that is already run
}

write.csv(Photo.R, "C:/Users/Kate/OneDrive - University of North Carolina at Chapel Hill/June 2019/TPC_2/Photo.R.csv") 


#Photo.R<-read.csv("C:/Users/Kate/OneDrive - University of North Carolina at Chapel Hill/June 2019/TPC_2/Photo.R.csv")
#View(Photo.R)
Photo.R <- na.omit(Photo.R)
Photo.R$X<-NULL



#join dataframes
Photo.R<-left_join(Photo.R, Sample.Info)
View(Photo.R)


# Calculate P and R rate
#Convert sample volume to mL
Photo.R$volume <- Photo.R$volume.mls/1000 #calculate volume

#Account for chamber volume to convert from umol L-1 s-1 to umol s-1. This standardizes across water volumes (different because of coral size) and removes per Liter
Photo.R$umol.sec <- Photo.R$umol.L.sec*Photo.R$volume

#Account for blank rate by temperature
#convert character columns to factors
Photo.R <- Photo.R %>%
  mutate_if(sapply(., is.character), as.factor)
View(Photo.R)

#make the blank column a factor

Photo.R$BLANK<-ifelse(Photo.R$treatment=='blank', 1,0)
Photo.R$BLANK<-as.factor(Photo.R$BLANK)
View(Photo.R)

photo.blnk <- aggregate(umol.sec ~ species*temp.Cat*light_dark*run*BLANK, data=Photo.R, mean)
View(photo.blnk)
# pull out only the blanks
#photo.blnk<-photo.blnk[photo.blnk$Species=='BK',]
photo.blnk<-photo.blnk[photo.blnk$BLANK==1,]
# remove the species column and join with the full data set
photo.blnk$species<-NULL
# remove the blank column
photo.blnk$BLANK<-NULL

colnames(photo.blnk)[4]<-'blank.rate' # rename the blank rate 


setwd("C:/Users/Kate/OneDrive - University of North Carolina at Chapel Hill/2019laptop/Documents/TPC_Mesop_BDA/R_output")

write.csv(photo.blnk,"C:/Users/Kate/OneDrive - University of North Carolina at Chapel Hill/2019laptop/Documents/TPC_Mesop_BDA/R_output/photo.blnk.csv")
          
# join the blank data with the rest of the data
Photo.R<-left_join(Photo.R, photo.blnk)
View(Photo.R)



# subtract the blanks######################
Photo.R$umol.sec.corr<-Photo.R$umol.sec-Photo.R$blank.rate

View(Photo.R)

#### Normalize to SA (surface area)#####

Photo.R$umol.cm2.hr <- (Photo.R$umol.sec.corr*3600)/Photo.R$surf.area.cm2 #mmol cm-2 hr-1

#Photo.R<-Photo.R[complete.cases(Photo.R),] # remove NAs and blanks
Photo.R<-Photo.R[Photo.R$BLANK==0,]

Photo.R <- na.omit(Photo.R)

write.csv(Photo.R,"C:/Users/Kate/OneDrive - University of North Carolina at Chapel Hill/2019laptop/Documents/TPC_Mesop_BDA/R_output/Photo.Rblankcorrected.csv")


#### I now how Pnet= light umol.cm.2.hr and respiration (NEGATIVE) dark umol.cm2.hr
#### Split data frames
Photo.P<-Photo.R%>%
  dplyr::filter(light_dark=="light")
#
Photo.Res<-Photo.R%>%
  dplyr::filter(light_dark=="dark")
#
View(Photo.P)
View(Photo.Res)

#Data was not measured correctly for the 2602 dark Trial in the BLANK CHamber- 
#remove trial 2602D 
Photo.Res%<>%
  mutate(filter.column=paste(run,light_dark))%>%
  dplyr::filter(filter.column!="2602 dark")
View(Photo.Res)  

Photo.Res$filter.column<-NULL
#
##make negative photosynthesis 0's

Photo.P$umol.cm2.hr[Photo.P$umol.cm2.hr<0]<-0 
Photo.P$umol.cm2.hr.c<-Photo.P$umol.cm2.hr
##make respiration positive #takes the absolute values to get positive respiration rates 
#Take the absolute value of Respiration to add to NP for GP estimates
Photo.Res$umol.cm2.hr.c<-abs(Photo.Res$umol.cm2.hr)

#Merge dataframes and log the rates
Photo.R2<-rbind(Photo.P, Photo.Res)

#write.csv(Photo.R2, '~/TPC_BDA/AllDataAnalysis_Presens_TPC_params/TPC_params_estimates_Topt/Saved datasheets from Script/Final dataframes/Photo.R2.csv') # export all the uptake rates
write.csv(Photo.R2, "C:/Users/Kate/OneDrive - University of North Carolina at Chapel Hill/2019laptop/Documents/TPC_Mesop_BDA/R_output/Photo.R2_respabsolute.csv")



View(Photo.R2)

#make ifelse statements to assign light treatments as NP and dark treatments as resp
#light will be assigned NP for net photosynthesis 

Photo.R2$rate.type <-ifelse(Photo.R2$light_dark=='light', "NP", "R")
Photo.R2$rate.type<-as.factor(Photo.R2$rate.type)
View(Photo.R2)

#rename fragment ID 
Photo.R2$individual.ID <- str_split(Photo.R2$fragment.ID, "_", n = Inf, simplify = TRUE)[,1]
Photo.R2$individual.ID <- as.factor(Photo.R2$individual.ID)
View(Photo.R2)

write.csv(Photo.R2,"C:/Users/Kate/OneDrive - University of North Carolina at Chapel Hill/2019laptop/Documents/TPC_Mesop_BDA/R_output/Photo.R2_NP_R.csv")


  
#resplit frames
Pnet<-Photo.R2%>%
  dplyr::filter(light_dark=="light")
#
Rdark<-Photo.R2%>%
  dplyr::filter(light_dark=="dark")

#renameumol.cm2.hr
Pnet$Pnet_umol.cm2.hr<-Pnet$umol.cm2.hr.c
Rdark$Rdark_umol.cm2.hr<-Rdark$umol.cm2.hr.c



library(tidyr)
library(magrittr)
## join data frames to get Pgross 
# bind data frams by fragment.ID, temp
resp.data<-Pnet%>%
  left_join(Rdark, by ="fragment.ID")%>%
  select(fragment.ID, species.x, treatment.x, genotype.x, Temp.C.x, temp.Cat.x, Pnet_umol.cm2.hr, Rdark_umol.cm2.hr)%>%
  na.omit() #removing 2602D- rates were incorrect

resp.data$fragment.ID<- as.character(resp.data$fragment.ID)  

resp.data%<>%
  mutate(geno=substr(fragment.ID, 1, nchar(fragment.ID)-2))
View(resp.data)


# Calculate Pgross- Pnet+Respiration= GP
resp.data$Pgross_umol.cm2.hr <- resp.data$Pnet_umol.cm2.hr+resp.data$Rdark_umol.cm2.hr

write.csv(resp.data,"C:/Users/Kate/OneDrive - University of North Carolina at Chapel Hill/2019laptop/Documents/TPC_Mesop_BDA/R_output/resp.data_GP.csv")


#Calculate means
AllMeans <- ddply(resp.data, c('geno','temp.Cat.x'), summarize,
                  #pnet
                  Pnet.mean= mean(Pnet_umol.cm2.hr, na.rm=T), #mean pnet
                  N = sum(!is.na(Pnet_umol.cm2.hr)), # sample size
                  Pnet.se = sd(Pnet_umol.cm2.hr, na.rm=T)/sqrt(N), #SE
                  #Rdark
                  Rdark.mean= mean(Rdark_umol.cm2.hr, na.rm=T), #mean rdark
                  Rdark.se = sd(Rdark_umol.cm2.hr, na.rm=T)/sqrt(N), #SE
                  #Pgross
                  Pgross.mean  = mean(Pgross_umol.cm2.hr, na.rm=TRUE),
                  Pgross.se = sd(Pgross_umol.cm2.hr, na.rm=TRUE)/sqrt(N),
                  Temp.mean = mean(Temp.C.x, na.rm=TRUE),
                  Temp.se = sd(Temp.C.x, na.rm=TRUE)/sqrt(N)
)

write.csv(AllMeans,"C:/Users/Kate/OneDrive - University of North Carolina at Chapel Hill/2019laptop/Documents/TPC_Mesop_BDA/R_output/All.Means_NP_R_GP.csv")

          
library(esquisse)
library(rvg)
  ### GRaph Pgross means
  GPplot<-ggplot(AllMeans, aes(x=temp.Cat.x, y=Pgross.mean, color=geno))+
    geom_point()+
    facet_wrap(~geno)
  
  esquisse:::ggplot_to_ppt("GPplot")
  
  Rplot<-ggplot(AllMeans, aes(x=temp.Cat.x, y=Rdark.mean, color=geno))+
    geom_point()+
    facet_wrap(~geno)
  
  esquisse:::ggplot_to_ppt("Rplo")
  
  
  

  AllMeansdepth <- ddply(resp.data, c('temp.Cat.x','treatment.x'), summarize,
                         #pnet
                         Pnet.mean= mean(Pnet_umol.cm2.hr, na.rm=T), #mean pnet
                         N = sum(!is.na(Pnet_umol.cm2.hr)), # sample size
                         Pnet.se = sd(Pnet_umol.cm2.hr, na.rm=T)/sqrt(N), #SE
                         #Rdark
                         Rdark.mean= mean(Rdark_umol.cm2.hr, na.rm=T), #mean rdark
                         Rdark.se = sd(Rdark_umol.cm2.hr, na.rm=T)/sqrt(N), #SE
                         #Pgross
                         Pgross.mean  = mean(Pgross_umol.cm2.hr, na.rm=TRUE),
                         Pgross.se = sd(Pgross_umol.cm2.hr, na.rm=TRUE)/sqrt(N),
                         Temp.mean = mean(Temp.C.x, na.rm=TRUE),
                         Temp.se = sd(Temp.C.x, na.rm=TRUE)/sqrt(N)
  )
  
  View(AllMeansdepth)
  
  write.csv(AllMeansdepth,"C:/Users/Kate/OneDrive - University of North Carolina at Chapel Hill/2019laptop/Documents/TPC_Mesop_BDA/R_output/All.MeansDepth.csv")

  
  GPplot<-ggplot(AllMeansdepth, aes(x=temp.Cat.x, y=Pgross.mean))+
    geom_point()+
    stat_summary(fun.data = "mean_cl_boot", colour = "black", size = 2)+
    facet_wrap(~treatment.x)
  
  esquisse:::ggplot_to_ppt("GPplot")
  
  Rplot<-ggplot(AllMeansdepth, aes(x=temp.Cat.x, y=Rdark.mean))+
    geom_point()+
    stat_summary(fun.data = "mean_cl_boot", colour = "black", size = 2)+
      facet_wrap(~treatment.x)
  
  esquisse:::ggplot_to_ppt("Rplot")
  
  
  
  ### COmbine Photo R2 and Respiration data to log Pgross and Respiration uml.cm2.hr- for graphs and TPC
  ##rename dataframe to work from Photo.R3 to preserve Photo.R2
  ##make column for GP and group by fragment ID and temp to keep R and NP together
  #
  #

    
  Photo.R22602<-Photo.R2%<>%
      dplyr::filter(run!="2602")
  View(Photo.R22602)  
  
  
write.csv(Photo.R22602,"C:/Users/Kate/OneDrive - University of North Carolina at Chapel Hill/2019laptop/Documents/TPC_Mesop_BDA/R_output/Photo.R22602.csv")
#### edit Photo.R22602 and combine with Photo.# to get Gross P on datasheet
  
Photo.R3 <- Photo.R22602 %>% 
  filter(temp.Cat <= 35) %>%
  group_by( individual.ID, temp.Cat, treatment, genotype) %>% 
  summarize(rates = sum(umol.cm2.hr.c), Temp.C=mean(Temp.C)) %>%
  mutate(rate.type="GP", light_dark="L") %>%
  rename(umol.cm2.hr.c=rates) %>%
  mutate(fragment.ID=paste0(individual.ID, "_", light_dark))


# using GP rates made in Photo.R3- combined into Photo.R22602 to get GP and R together
# 
Photo.T<-read.csv("C:/Users/Kate/OneDrive - University of North Carolina at Chapel Hill/2019laptop/Documents/TPC_Mesop_BDA/R_output/Photo.T.csv")

View(Photo.T)
Photo.T$X<-NULL  




