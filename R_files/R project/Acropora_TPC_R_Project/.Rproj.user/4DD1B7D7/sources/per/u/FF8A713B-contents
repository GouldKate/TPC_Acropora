#Danielle Scripts- Working on TPC- but need to use new mydata frame with M50Cd removed
#


########-----#made a test DF with just one treatment--------####

test.df<-mydata%>%
  filter(genotype=="K2" & rate.type=="GP")
#  


#--------ONLY ONE TREATMENT GROUP HERE-------------
#--fit models
#run nls_mulstart


GP_K2 <- nls_multstart(log.rate ~ schoolfield_high(lnc, E, Eh, Th, temp = K, Tc = 27),
                       data = test.df,
                       iter = 500,
                       start_lower = c(lnc = -10, E = 0.1, Eh = 0.2, Th = 285),
                       start_upper = c(lnc = 10, E = 2, Eh = 5, Th = 330),
                       supp_errors = 'Y',
                       na.action = na.omit,
                       lower = c(lnc = -10, E = 0, Eh = 0, Th = 0))
print(GP_K2)


####################################----- allfits
fits <- mydata %>%
  group_by(., rate.type, treatment, fragment.ID) %>%
  nest() %>%
  mutate(fit = purrr::map(data, ~ nls_multstart(log.rate ~ schoolfield_high(lnc, E, Eh, Th, temp = K, Tc = 26),
                                                data = .x,
                                                iter = 1000,
                                                start_lower = c(lnc = -10, E = 0.1, Eh = 0.2, Th = 285),
                                                start_upper = c(lnc = 10, E = 2, Eh = 5, Th = 330),
                                                supp_errors = 'Y',
                                                na.action = na.omit,
                                                lower = c(lnc = -10, E = 0, Eh = 0, Th = 0))))


# look at a single fit
summary(fits$fit[[1]])

# look at output object
select(fits, fragment.ID, data, fit)  

# get summary info
info <- fits %>%
  unnest(fit %>% map(glance))

# get params
params <- fits %>%
  unnest(fit %>% map(tidy))

# get confidence intervals
CI <- fits %>% 
  unnest(fit %>% map(~ confint2(.x) %>%
                       data.frame() %>%
                       rename(., conf.low = X2.5.., conf.high = X97.5..))) %>%
  group_by(., fragment.ID) %>%
  mutate(., term = c('lnc', 'E', 'Eh', 'Th')) %>%
  ungroup()

# merge parameters and CI estimates
params <- merge(params, CI, by = intersect(names(params), names(CI)))

# get predictions
preds <- fits %>%
  unnest(fit %>% map(augment))


# new data frame of predictions, do this to set a sequence to make a smooth curve with your prediction points
new_preds <- mydata %>%  do(., data.frame(K = seq(min(.$K), max(.$K), length.out = 150), stringsAsFactors = FALSE)) #setting a specific sequence so you can have a smooth curve


# max and min for each curve
max_min <- mydata %>% group_by(fragment.ID) %>%
  summarise(., min_K = min(K), max_K = max(K)) %>%
  ungroup()


# create new predictions
preds2 <- fits %>%
  unnest(fit %>% map(augment, newdata = new_preds)) %>%
  merge(., max_min, by = "fragment.ID") %>%
  group_by(., fragment.ID) %>%
  filter(., K > unique(min_K) & K < unique(max_K)) %>%
  rename(., ln.rate = .fitted) %>%
  ungroup()

#want to do ggplot where we look at individual curves for respiration rates of each fragment
mydataR <- mydata %>%
  filter(rate.type =="R")

preds2R<- preds2 %>%
  filter(rate.type =="R")


#-----Save plot in PPy
library(esquisse)
library(rvg)



Rcurve<-  ggplot() +
  geom_point(aes(K - 273.15, log.rate, col = rate.type), size = 2, mydataR) +
  geom_line(aes(K - 273.15, ln.rate, col = rate.type, group = fragment.ID), alpha = 0.5, preds2R) +
  facet_wrap(~ fragment.ID, labeller = labeller(.multi_line = FALSE)) +
  scale_colour_manual(values = c('green4', 'blue', 'black')) +
  theme_bw(base_size = 12, base_family = 'Helvetica') +
  ylab(expression("Log " *mu*"mol (" *cm^-2 *hr^-1*")")) +
  xlab('Temperature (ºC)') +
  geom_hline(yintercept=0, color = "red") +
  theme(legend.position = c(0.91, 0.85))+
  labs(color = "Rate Type")  +
  theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),panel.background = element_blank(), axis.line = element_line(colour = "black"))

esquisse:::ggplot_to_ppt("Rcurve")


#want to do ggplot where we look at individual curves for photosynthesis rates of each fragment
mydataGP <- mydata %>%
  filter(rate.type =="GP")

preds2GP<- preds2 %>%
  filter(rate.type =="GP")

GPcurve<-ggplot() +
  geom_point(aes(K - 273.15, log.rate, col = rate.type), size = 2, mydataGP) +
  geom_line(aes(K - 273.15, ln.rate, col = rate.type, group = fragment.ID), alpha = 0.5, preds2GP) +
  facet_wrap(~ fragment.ID, labeller = labeller(.multi_line = FALSE)) +
  scale_colour_manual(values = c('green4', 'blue', 'black')) +
  theme_bw(base_size = 12, base_family = 'Helvetica') +
  ylab(expression("Log " *mu*"mol (" *cm^-2 *hr^-1*")")) +
  xlab('Temperature (ºC)') +
  geom_hline(yintercept=0, color = "red") +
  theme(legend.position = c(0.91, 0.85))+
  labs(color = "Rate Type")  +
  theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),panel.background = element_blank(), axis.line = element_line(colour = "black"))


esquisse:::ggplot_to_ppt("GPcurve")


# plot all P, R and C values in TPCs
BoCurve<-ggplot() +
  geom_point(aes(K - 273.15, log.rate, col = rate.type), size = 2, mydata) +
  geom_line(aes(K - 273.15, ln.rate, col = rate.type, group = fragment.ID), alpha = 0.5, preds2) +
  scale_colour_manual(values = c('green4', 'blue', 'black')) +
  theme_bw(base_size = 12, base_family = 'Helvetica') +
  ylab(expression("Log " *mu*"mol (" *cm^-2 *hr^-1*")")) +
  xlab('Temperature (ºC)') +
  #geom_hline(yintercept=0, color = "red") +
  theme(legend.position = c(0.91, 0.85)) +
  labs(color = "Rate Type")  + 
  theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),panel.background = element_blank(), axis.line = element_line(colour = "black"))


esquisse:::ggplot_to_ppt("BoCurve")


fitsgeno<- mydata %>%
  group_by(., rate.type, treatment, fragment.ID, genotype) %>%
  nest() %>%
  mutate(fit = purrr::map(data, ~ nls_multstart(log.rate ~ schoolfield_high(lnc, E, Eh, Th, temp = K, Tc = 26),
                                                data = .x,
                                                iter = 1000,
                                                start_lower = c(lnc = -10, E = 0.1, Eh = 0.2, Th = 285),
                                                start_upper = c(lnc = 10, E = 2, Eh = 5, Th = 330),
                                                supp_errors = 'Y',
                                                na.action = na.omit,
                                                lower = c(lnc = -10, E = 0, Eh = 0, Th = 0))))



# look at a single fit
summary(fitsgeno$fit[[1]])

# look at output object
select(fitsgeno, fragment.ID, data, fit)  
select(fitsgeno, genotype, data, fit)  

# get summary info
infog <- fitsgeno %>%
  unnest(fit %>% map(glance))

# get params
paramsg <- fitsgeno %>%
  unnest(fit %>% map(tidy))

# get confidence intervals
CIg <- fitsgeno %>% 
  unnest(fit %>% map(~ confint2(.x) %>%
                       data.frame() %>%
                       rename(., conf.low = X2.5.., conf.high = X97.5..))) %>%
  group_by(., fragment.ID,genotype) %>%
  mutate(., term = c('lnc', 'E', 'Eh', 'Th')) %>%
  ungroup()

# merge parameters and CI estimates
paramsg <- merge(paramsg, CIg, by = intersect(names(paramsg), names(CIg)))

# get predictions
predsg <- fitsgeno %>%
  unnest(fit %>% map(augment))


# new data frame of predictions, do this to set a sequence to make a smooth curve with your prediction points
new_predsg <- mydata %>%  do(., data.frame(K = seq(min(.$K), max(.$K), length.out = 150), stringsAsFactors = FALSE)) #setting a specific sequence so you can have a smooth curve


# max and min for each curve
max_ming <- mydata %>% group_by(fragment.ID) %>%
  summarise(., min_K = min(K), max_K = max(K)) %>%
  ungroup()


# create new predictions
preds2g <- fitsgeno %>%
  unnest(fit %>% map(augment, newdata = new_predsg)) %>%
  merge(., max_min, by = "fragment.ID") %>%
  group_by(., fragment.ID, genotype) %>%
  filter(., K > unique(min_K) & K < unique(max_K)) %>%
  rename(., ln.rate = .fitted) %>%
  ungroup()

#want to do ggplot where we look at individual curves for respiration rates of each fragment
mydataRg <- mydata %>%
  filter(rate.type =="R")

preds2Rg<- preds2g %>%
  filter(rate.type =="R")


#-----Save plot in PPy
library(esquisse)
library(rvg)



Rgcurve<-  ggplot() +
  geom_point(aes(K - 273.15, log.rate, col = rate.type), size = 2, mydataRg) +
  geom_line(aes(K - 273.15, ln.rate, col = rate.type, group = genotype), alpha = 0.5, preds2Rg) +
  facet_wrap(~ genotype, labeller = labeller(.multi_line = FALSE)) +
  scale_colour_manual(values = c('green4', 'blue', 'black')) +
  theme_bw(base_size = 12, base_family = 'Helvetica') +
  ylab(expression("Log " *mu*"mol (" *cm^-2 *hr^-1*")")) +
  xlab('Temperature (ºC)') +
  geom_hline(yintercept=0, color = "red") +
  theme(legend.position = c(0.91, 0.85))+
  labs(color = "Rate Type")  +
  theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),panel.background = element_blank(), axis.line = element_line(colour = "black"))

esquisse:::ggplot_to_ppt("Rgcurve")


#want to do ggplot where we look at individual curves for photosynthesis rates of each fragment
mydataGP <- mydata %>%
  filter(rate.type =="GP")

preds2GP<- preds2 %>%
  filter(rate.type =="GP")

GPcurve<-ggplot() +
  geom_point(aes(K - 273.15, log.rate, col = rate.type), size = 2, mydataGP) +
  geom_line(aes(K - 273.15, ln.rate, col = rate.type, group = fragment.ID), alpha = 0.5, preds2GP) +
  facet_wrap(~ fragment.ID, labeller = labeller(.multi_line = FALSE)) +
  scale_colour_manual(values = c('green4', 'blue', 'black')) +
  theme_bw(base_size = 12, base_family = 'Helvetica') +
  ylab(expression("Log " *mu*"mol (" *cm^-2 *hr^-1*")")) +
  xlab('Temperature (ºC)') +
  geom_hline(yintercept=0, color = "red") +
  theme(legend.position = c(0.91, 0.85))+
  labs(color = "Rate Type")  +
  theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),panel.background = element_blank(), axis.line = element_line(colour = "black"))


esquisse:::ggplot_to_ppt("GPcurve")


# plot all P, R and C values in TPCs
BoCurve<-ggplot() +
  geom_point(aes(K - 273.15, log.rate, col = rate.type), size = 2, mydata) +
  geom_line(aes(K - 273.15, ln.rate, col = rate.type, group = fragment.ID), alpha = 0.5, preds2) +
  scale_colour_manual(values = c('green4', 'blue', 'black')) +
  theme_bw(base_size = 12, base_family = 'Helvetica') +
  ylab(expression("Log " *mu*"mol (" *cm^-2 *hr^-1*")")) +
  xlab('Temperature (ºC)') +
  #geom_hline(yintercept=0, color = "red") +
  theme(legend.position = c(0.91, 0.85)) +
  labs(color = "Rate Type")  + 
  theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),panel.background = element_blank(), axis.line = element_line(colour = "black"))


esquisse:::ggplot_to_ppt("BoCurve")