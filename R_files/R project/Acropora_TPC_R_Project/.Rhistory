#ylim(0,1.5)+
facet_wrap(~ rate.type, labeller = labeller(.multi_line = FALSE))
esquisse:::ggplot_to_ppt("GP")
View(resp.datafin)
resp.datafin<-read.csv("C:/Users/Kate/OneDrive - University of North Carolina at Chapel Hill/2019laptop/Documents/TPC_Acropora/R_files/R_Output/Pgross_Pnet-Rdark.csv")
View(resp.datafin)
GP<-ggplot(resp.datafin, aes(x=Temp.C, y=GP_umol.cm2.hr, group = individual.ID, col = genotype))+
geom_point()+
theme_bw () +
ylim(-2,1.5)+
facet_wrap(~ genotype*treatment, labeller = labeller(.multi_line = FALSE))
esquisse:::ggplot_to_ppt("GP")
GP<-ggplot(resp.datafin, aes(x=Temp.C, y=GP_umol.cm2.hr, group = individual.ID, col = genotype))+
geom_point()+
theme_bw () +
ylim(-2,4)+
facet_wrap(~ genotype*treatment, labeller = labeller(.multi_line = FALSE))
esquisse:::ggplot_to_ppt("GP")
GP<-ggplot(resp.datafin2, aes(x=Temp.C, y=umol.cm2.hr, group = individual.ID, col = genotype))+
geom_point()+
theme_bw () +
#ylim(0,1.5)+
facet_wrap(~ rate.type, labeller = labeller(.multi_line = FALSE))
esquisse:::ggplot_to_ppt("GP")
GP<-ggplot(resp.datafin2, aes(x=Temp.C, y=umol.cm2.hr, group = rate.type, col = genotype))+
geom_point()+
theme_bw () +
#ylim(0,1.5)+
facet_wrap(~ treatment*rate.type, labeller = labeller(.multi_line = FALSE))
esquisse:::ggplot_to_ppt("GP")
#Calculate means from resp.datafin with ALL NP, R, and GP umo.cm2.hr on it
AllMeansG <- ddply(resp.datafin2, c('genotype'), summarize,
#pnet
Pnet.mean= mean(Pnet_umol.cm2.hr, na.rm=T), #mean pnet
N = sum(!is.na(Pnet_umol.cm2.hr)), # sample size
Pnet.se = sd(Pnet_umol.cm2.hr, na.rm=T)/sqrt(N), #SE
#Rdark
Rdark.mean= mean(Rdark_umol.cm2.hr, na.rm=T), #mean rdark
Rdark.se = sd(Rdark_umol.cm2.hr, na.rm=T)/sqrt(N), #SE
#Pgross
Pgross.mean  = mean(GP_umol.cm2.hr, na.rm=TRUE),
Pgross.se = sd(GP_umol.cm2.hr, na.rm=TRUE)/sqrt(N),
Temp.mean = mean(Temp.C, na.rm=TRUE),
Temp.se = sd(Temp.C, na.rm=TRUE)/sqrt(N)
)
#Calculate means from resp.datafin with ALL NP, R, and GP umo.cm2.hr on it
AllMeansG <- ddply(resp.datafin, c('genotype'), summarize,
#pnet
Pnet.mean= mean(Pnet_umol.cm2.hr, na.rm=T), #mean pnet
N = sum(!is.na(Pnet_umol.cm2.hr)), # sample size
Pnet.se = sd(Pnet_umol.cm2.hr, na.rm=T)/sqrt(N), #SE
#Rdark
Rdark.mean= mean(Rdark_umol.cm2.hr, na.rm=T), #mean rdark
Rdark.se = sd(Rdark_umol.cm2.hr, na.rm=T)/sqrt(N), #SE
#Pgross
Pgross.mean  = mean(GP_umol.cm2.hr, na.rm=TRUE),
Pgross.se = sd(GP_umol.cm2.hr, na.rm=TRUE)/sqrt(N),
Temp.mean = mean(Temp.C, na.rm=TRUE),
Temp.se = sd(Temp.C, na.rm=TRUE)/sqrt(N)
)
View(AllMeansG)
AllMeansT <- ddply(resp.datafin, c('genotype','temp.Cat', 'treatment'), summarize,
#pnet
Pnet.mean= mean(Pnet_umol.cm2.hr, na.rm=T), #mean pnet
N = sum(!is.na(Pnet_umol.cm2.hr)), # sample size
Pnet.se = sd(Pnet_umol.cm2.hr, na.rm=T)/sqrt(N), #SE
#Rdark
Rdark.mean= mean(Rdark_umol.cm2.hr, na.rm=T), #mean rdark
Rdark.se = sd(Rdark_umol.cm2.hr, na.rm=T)/sqrt(N), #SE
#Pgross
Pgross.mean  = mean(GP_umol.cm2.hr, na.rm=TRUE),
Pgross.se = sd(GP_umol.cm2.hr, na.rm=TRUE)/sqrt(N),
Temp.mean = mean(Temp.C, na.rm=TRUE),
Temp.se = sd(Temp.C, na.rm=TRUE)/sqrt(N)
)
View(AllMeansT)
#write.csv(AllMeansT, "C:/Users/Kate/OneDrive - University of North Carolina at Chapel Hill/June 2019/TPC_Output/AllMeansTfin.csv")
write.csv(AllMeansT, "C:/Users/Kate/OneDrive - University of North Carolina at Chapel Hill/2019laptop/Documents/TPC_Acropora/R_files/R_Output/AllMeansTfin.csv")
AllMeansdepth <- ddply(resp.datafin, c('treatment'), summarize,
#pnet
Pnet.mean= mean(Pnet_umol.cm2.hr, na.rm=T), #mean pnet
N = sum(!is.na(Pnet_umol.cm2.hr)), # sample size
Pnet.se = sd(Pnet_umol.cm2.hr, na.rm=T)/sqrt(N), #SE
#Rdark
Rdark.mean= mean(Rdark_umol.cm2.hr, na.rm=T), #mean rdark
Rdark.se = sd(Rdark_umol.cm2.hr, na.rm=T)/sqrt(N), #SE
#Pgross
Pgross.mean  = mean(GP_umol.cm2.hr, na.rm=TRUE),
Pgross.se = sd(GP_umol.cm2.hr, na.rm=TRUE)/sqrt(N),
Temp.mean = mean(Temp.C, na.rm=TRUE),
Temp.se = sd(Temp.C, na.rm=TRUE)/sqrt(N)
)
View(AllMeansdepth)
#write.csv(AllMeansdepth, "C:/Users/Kate/OneDrive - University of North Carolina at Chapel Hill/June 2019/TPC_Output/AllMeansdepthfin.csv")
write.csv(AllMeansdepth, "C:/Users/Kate/OneDrive - University of North Carolina at Chapel Hill/2019laptop/Documents/TPC_Acropora/R_files/R_Output/AllMeansdepthfin.csv")
### GRaph Pgross means by species
GPplot<-ggplot(AllMeansT, aes(x=temp.Cat, y=Pgross.mean, color=genotype))+
geom_point()+
facet_wrap(~genotype)
esquisse:::ggplot_to_ppt("GPplot")
Rrplot<-ggplot(AllMeansT, aes(x=temp.Cat, y=Rdark.mean, color=genotype))+
geom_point()+
facet_wrap(~genotype)
esquisse:::ggplot_to_ppt("Rrplot")
Nplot<-ggplot(AllMeansT, aes(x=temp.Cat, y=Pnet.mean, color=genotype))+
geom_point()+
facet_wrap(~genotype)
esquisse:::ggplot_to_ppt("Nplot")
Rplot<-ggplot(AllMeansT, aes(x=temp.Cat, y=Rdark.mean, color=genotype))+
geom_point()+
facet_wrap(~treatment)
esquisse:::ggplot_to_ppt("Rplot")
Gplot<-ggplot(AllMeansT, aes(x=temp.Cat, y=Pgross.mean, color=genotype))+
geom_point()+
facet_wrap(~treatment)
esquisse:::ggplot_to_ppt("Gplot")
NPplot<-ggplot(AllMeansT, aes(x=temp.Cat, y=Pnet.mean, color=genotype))+
geom_point()+
facet_wrap(~treatment)
esquisse:::ggplot_to_ppt("NPplot")
GPtbT<-ggplot(subset(resp.datafin2,rate.type=="GP"), aes(x=treatment, umol.cm2.hr, colour=treatment, shape=genotype))+
stat_summary(fun.data = "mean_cl_boot", colour = "black", size = 2)+
geom_point(size=2)+
geom_point(position="dodge", size=2)+
ylab("GP(umol.cm2.hr)")+
labs(title="Mean GP across Treatment")+
coord_flip()
esquisse:::ggplot_to_ppt("GPtbT")
GPtbT<-ggplot(subset(resp.datafin2,rate.type=="GP"), aes(x=treatment, umol.cm2.hr, colour=genotype, shape=treatment))+
stat_summary(fun.data = "mean_cl_boot", colour = "black", size = 2)+
geom_point(size=2)+
geom_point(position="dodge", size=2)+
ylab("GP(umol.cm2.hr)")+
labs(title="Mean GP across Treatment")+
coord_flip()
esquisse:::ggplot_to_ppt("GPtbT")
# added Fragment.ID.full to final_NP_R_GP_Edited.csv and saved as  FINAL_resp_data)
#read in your rawdata
raw_data <- read.csv("C:/Users/Kate/OneDrive - University of North Carolina at Chapel Hill/2019laptop/Documents/TPC_Acropora/R_files/R_Output/Data_forTPC.csv")#read in Gross Photosynthesis, respiration rates, and Pnet
View(raw_data)
#filtering out NP, removes it from the list
mydata<-raw_data
mydata<-filter(mydata, rate.type !="NP")
View(mydata)
#convert your C temperature to K
mydata%<>%
mutate(K=mydata$Temp.C + 273.15)
mydataP<-subset(mydata,rate.type=="GP")
mydataR<-subset(mydata,rate.type=="R")
#### Take absolute value of Respiration then log bot
####
#### h respiration and Photosynthesis for Sharpesschcoolfield equation
mydataR$umol.cm2.hr<-abs(mydataR$umol.cm2.hr)
Mydata<-rbind(mydataP,mydataR)
View(mydata)
View(Mydata)
Mydata$log.rate <- log(mydata$umol.cm2.hr + 1)  #logging and adding 0.3(-2 was smallest in data set) because a log of zero does not exist
Mydata$log.rate <- log(Mydata$umol.cm2.hr + 1)  #logging and adding 0.3(-2 was smallest in data set) because a log of zero does not exist
write.csv(Mydata,"C:/Users/Kate/OneDrive - University of North Carolina at Chapel Hill/2019laptop/Documents/TPC_Acropora/R_files/R_Output/mydata_ln.rate_TPC.csv")#save longged data and transformed Tempr (K)
setwd( "C:/Users/Kate/OneDrive - University of North Carolina at Chapel Hill/2019laptop/Documents/TPC_Acropora/R_files/R_Output")
write.csv(Mydata,"C:/Users/Kate/OneDrive - University of North Carolina at Chapel Hill/2019laptop/Documents/TPC_Acropora/R_files/R_Output/mydata_ln.rate_TPC.csv")#save longged data and transformed Tempr (K)
write.csv(Mydata,"C:/Users/Kate/OneDrive - University of North Carolina at Chapel Hill/2019laptop/Documents/TPC_Acropora/R_files/R_Output/mydata_ln.rate_TPC.csv")#save longged data and transformed Tempr (K)
#Define the Schoolfield equation:
schoolfield_high <- function(lnc, E, Eh, Th, temp, Tc) {
Tc <- 273.15 + Tc
k <- 8.62e-5
boltzmann.term <- lnc + log(exp(E/k*(1/Tc - 1/temp)))
inactivation.term <- log(1/(1 + exp(Eh/k*(1/Th - 1/temp))))
return(boltzmann.term + inactivation.term)
}
K2.df<-filtdata%>%
filter(genotype=="K2")
View(K2.df)
filtdata<-Mydata
View(filtdata)
#Define the Schoolfield equation:
schoolfield_high <- function(lnc, E, Eh, Th, temp, Tc) {
Tc <- 273.15 + Tc
k <- 8.62e-5
boltzmann.term <- lnc + log(exp(E/k*(1/Tc - 1/temp)))
inactivation.term <- log(1/(1 + exp(Eh/k*(1/Th - 1/temp))))
return(boltzmann.term + inactivation.term)
}
K2.df<-filtdata%>%
filter(genotype=="K2")
M5.df<-filtdata%>%
filter(genotype=="M5")
M6.df<-filtdata%>%
filter(genotype=="M6")
#---- K2------
K2.df.GP<-K2.df%>%
filter(rate.type=="GP")
K2.df.R<-K2.df%>%
filter(rate.type=="R")
#----M5------
M5.df.GP<-M5.df%>%
filter(rate.type=="GP")
M5.df.R<-M5.df%>%
filter(rate.type=="R")
#------M6------
M6.df.GP<-M6.df%>%
filter(rate.type=="GP")
M6.df.R<-M6.df%>%
filter(rate.type=="R")
K2.df.GP.T1<-K2.df.GP%>%filter(treatment=="T1")
M5.df.GP.T1<-M5.df.GP%>%filter(treatment=="T1")
M6.df.GP.T1<-M6.df.GP%>%filter(treatment=="T1")
K2.df.GP.T2<-K2.df.GP%>%filter(treatment=="T2")
M5.df.GP.T2<-M5.df.GP%>%filter(treatment=="T2")
M6.df.GP.T2<-M6.df.GP%>%filter(treatment=="T2")
K2.df.GP.C<-K2.df.GP%>%filter(treatment=="C")
M5.df.GP.C<-M5.df.GP%>%filter(treatment=="C")
M6.df.GP.C<-M6.df.GP%>%filter(treatment=="C")
K2.df.GP.T3<-K2.df.GP%>%filter(treatment=="T3")
M5.df.GP.T3<-M5.df.GP%>%filter(treatment=="T3")
M6.df.GP.T3<-M6.df.GP%>%filter(treatment=="T3")
K2.df.R.T1<-K2.df.R%>%filter(treatment=="T1")
M5.df.R.T1<-M5.df.R%>%filter(treatment=="T1")
M6.df.R.T1<-M6.df.R%>%filter(treatment=="T1")
K2.df.R.T2<-K2.df.R%>%filter(treatment=="T2")
M5.df.R.T2<-M5.df.R%>%filter(treatment=="T2")
M6.df.R.T2<-M6.df.R%>%filter(treatment=="T2")
K2.df.R.C<-K2.df.R%>%filter(treatment=="C")
M5.df.R.C<-M5.df.R%>%filter(treatment=="C")
M6.df.R.C<-M6.df.R%>%filter(treatment=="C")
K2.df.R.T3<-K2.df.R%>%filter(treatment=="T3")
M5.df.R.T3<-M5.df.R%>%filter(treatment=="T3")
M6.df.R.T3<-M6.df.R%>%filter(treatment=="T3")
All.fittedT<-data.frame()#create an empty df to fill with fitted values
All.CIT<-data.frame()#create an empty df. to fill with confidence intervals
mult.fit.curves<-function(Data){
fit2 <- nls_multstart(log.rate ~ schoolfield_high(lnc, E, Eh, Th, temp = K, Tc = 27),
data = Data,
iter = 500,
start_lower = c(lnc = -10, E = 0.1, Eh = 0.2, Th = 285),
start_upper = c(lnc = 10, E = 2, Eh = 5, Th = 330),
supp_errors = 'Y',
na.action = na.omit,
lower = c(lnc = -10, E = 0, Eh = 0, Th = 0))
#print(fit2)
preds <- augment(fit2)
Data%<>%
mutate(fitted=preds$.fitted,
residuals=preds$.resid)
All.fittedT<<-rbind(All.fittedT,Data)
fit_boots <- Data %>%
modelr::bootstrap(n = 10, id = 'boot_num') %>% #change the number for more straps
group_by(boot_num) %>%
mutate(fit = map(strap, ~nls_multstart(log.rate ~ schoolfield_high(lnc, E, Eh, Th, temp = K, Tc = 27),
data = data.frame(.),
iter = 100,
start_lower = c(lnc = -10, E = 0.1, Eh = 0.2, Th = 285),
start_upper = c(lnc = 10, E = 2, Eh = 5, Th = 330),
lower = c(lnc=-10, E=0, Eh=0, Th=0),
supp_errors = 'Y')
))
fit_boots
# get predictions
preds_boot <- fit_boots %>%
unnest(fit %>% map(augment)) %>%
ungroup()
new_preds <- Data %>%
do(., data.frame(K = seq(min(.$K), max(.$K), length.out = 250), stringsAsFactors = FALSE))
preds <- augment(fit2, newdata = new_preds)
df.genotype<-(Data$genotype[1])
df.rate.type<-(Data$rate.type[1])
df.treatment<-(Data$treatment[1])
preds <- fit_boots %>%
unnest(fit %>% map(augment, newdata = new_preds)) %>%
# group by each value of K and get quantiles
group_by(., K) %>%
summarise(lwr_CI = quantile(.fitted, 0.025),
upr_CI = quantile(.fitted, 0.975)) %>%
ungroup() %>%
merge(., preds, by = 'K')%>%
mutate(genotype=factor(df.genotype),
treatment=factor(df.treatment),
rate.type=factor(df.rate.type))
All.CIT<<-rbind(All.CIT, preds)
}
mult.fit.curves(K2.df.GP.T1)
?unnest
?group_by
mult.fit.curves<-function(Data){
fit2 <- nls_multstart(log.rate ~ schoolfield_high(lnc, E, Eh, Th, temp = K, Tc = 27),
data = Data,
iter = 500,
start_lower = c(lnc = -10, E = 0.1, Eh = 0.2, Th = 285),
start_upper = c(lnc = 10, E = 2, Eh = 5, Th = 330),
supp_errors = 'Y',
na.action = na.omit,
lower = c(lnc = -10, E = 0, Eh = 0, Th = 0))
#print(fit2)
preds <- augment(fit2)
Data%<>%
mutate(fitted=preds$.fitted,
residuals=preds$.resid)
All.fittedT<<-rbind(All.fittedT,Data)
fit_boots <- Data %>%
modelr::bootstrap(n = 10, id = 'boot_num') %>% #change the number for more straps
group_by(boot_num) %>%
mutate(fit = map(strap, ~nls_multstart(log.rate ~ schoolfield_high(lnc, E, Eh, Th, temp = K, Tc = 27),
data = data.frame(.),
iter = 100,
start_lower = c(lnc = -10, E = 0.1, Eh = 0.2, Th = 285),
start_upper = c(lnc = 10, E = 2, Eh = 5, Th = 330),
lower = c(lnc=-10, E=0, Eh=0, Th=0),
supp_errors = 'Y')
))
fit_boots
# get predictions
preds_boot <- fit_boots %>%
tidyr::  unnest(fit %>% map(augment)) %>%
ungroup()
new_preds <- Data %>%
do(., data.frame(K = seq(min(.$K), max(.$K), length.out = 250), stringsAsFactors = FALSE))
preds <- augment(fit2, newdata = new_preds)
df.genotype<-(Data$genotype[1])
df.rate.type<-(Data$rate.type[1])
df.treatment<-(Data$treatment[1])
preds <- fit_boots %>%
tidyr:: unnest(fit %>% map(augment, newdata = new_preds)) %>%
# group by each value of K and get quantiles
dplyr:: group_by(., K) %>%
summarise(lwr_CI = quantile(.fitted, 0.025),
upr_CI = quantile(.fitted, 0.975)) %>%
ungroup() %>%
merge(., preds, by = 'K')%>%
mutate(genotype=factor(df.genotype),
treatment=factor(df.treatment),
rate.type=factor(df.rate.type))
All.CIT<<-rbind(All.CIT, preds)
}
mult.fit.curves(K2.df.GP.T1)
All.fitted<-data.frame()#create an empty df to fill with fitted values
All.CI<-data.frame()#create an empty df. to fill with confidence intervals
mult.fit.curves<-function(Data){
fit2 <- nls_multstart(log.rate ~ schoolfield_high(lnc, E, Eh, Th, temp = K, Tc = 27),
data = Data,
iter = 500,
start_lower = c(lnc = -10, E = 0.1, Eh = 0.2, Th = 285),
start_upper = c(lnc = 10, E = 2, Eh = 5, Th = 330),
supp_errors = 'Y',
na.action = na.omit,
lower = c(lnc = -10, E = 0, Eh = 0, Th = 0))
#print(fit2)
preds <- augment(fit2)
Data%<>%
mutate(fitted=preds$.fitted,
residuals=preds$.resid)
All.fitted<<-rbind(All.fitted,Data)
fit_boots <- Data %>%
modelr::bootstrap(n = 10, id = 'boot_num') %>% #change the number for more straps
group_by(boot_num) %>%
mutate(fit = map(strap, ~nls_multstart(log.rate ~ schoolfield_high(lnc, E, Eh, Th, temp = K, Tc = 27),
data = data.frame(.),
iter = 100,
start_lower = c(lnc = -10, E = 0.1, Eh = 0.2, Th = 285),
start_upper = c(lnc = 10, E = 2, Eh = 5, Th = 330),
lower = c(lnc=-10, E=0, Eh=0, Th=0),
supp_errors = 'Y')
))
fit_boots
# get predictions
preds_boot <- fit_boots %>%
unnest(fit %>% map(augment)) %>%
ungroup()
new_preds <- Data %>%
do(., data.frame(K = seq(min(.$K), max(.$K), length.out = 250), stringsAsFactors = FALSE))
preds <- augment(fit2, newdata = new_preds)
df.genotype<-(Data$genotype[1])
df.rate.type<-(Data$rate.type[1])
df.treatment<-(Data$treatment[1])
preds <- fit_boots %>%
unnest(fit %>% map(augment, newdata = new_preds)) %>%
# group by each value of K and get quantiles
group_by(., K) %>%
summarise(lwr_CI = quantile(.fitted, 0.025),
upr_CI = quantile(.fitted, 0.975)) %>%
ungroup() %>%
merge(., preds, by = 'K')%>%
mutate(genotype=factor(df.genotype),
treatment=factor(df.treatment),
rate.type=factor(df.rate.type))
All.CI<<-rbind(All.CI, preds)
}
mult.fit.curves(K2.df.GP.T1)
View(K2.df.GP.C)
View(K2.df.GP.C)
All.fitted<-data.frame()#create an empty df to fill with fitted values
All.CI<-data.frame()#create an empty df. to fill with confidence intervals
View(schoolfield_high)
mult.fit.curves<-function(Data){
fit2 <- nls_multstart(log.rate ~ schoolfield_high(lnc, E, Eh, Th, temp = K, Tc = 27),
data = Data,
iter = 500,
start_lower = c(lnc = -10, E = 0.1, Eh = 0.2, Th = 285),
start_upper = c(lnc = 10, E = 2, Eh = 5, Th = 330),
supp_errors = 'Y',
na.action = na.omit,
lower = c(lnc = -10, E = 0, Eh = 0, Th = 0))
#print(fit2)
preds <- augment(fit2)
Data%<>%
mutate(fitted=preds$.fitted,
residuals=preds$.resid)
All.fitted<<-rbind(All.fitted,Data)
fit_boots <- Data %>%
modelr::bootstrap(n = 10, id = 'boot_num') %>% #change the number for more straps
group_by(boot_num) %>%
mutate(fit = map(strap, ~nls_multstart(log.rate ~ schoolfield_high(lnc, E, Eh, Th, temp = K, Tc = 27),
data = data.frame(.),
iter = 100,
start_lower = c(lnc = -10, E = 0.1, Eh = 0.2, Th = 285),
start_upper = c(lnc = 10, E = 2, Eh = 5, Th = 330),
lower = c(lnc=-10, E=0, Eh=0, Th=0),
supp_errors = 'Y')
))
fit_boots
# get predictions
preds_boot <- fit_boots %>%
unnest(fit %>% map(augment)) %>%
ungroup()
new_preds <- Data %>%
do(., data.frame(K = seq(min(.$K), max(.$K), length.out = 250), stringsAsFactors = FALSE))
preds <- augment(fit2, newdata = new_preds)
df.treatment<-(Data$treatment[1])
df.rate.type<-(Data$rate.type[1])
df.genotype<-(Data$genotype[1])
preds <- fit_boots %>%
unnest(fit %>% map(augment, newdata = new_preds)) %>%
# group by each value of K and get quantiles
group_by(., K) %>%
summarise(lwr_CI = quantile(.fitted, 0.025),
upr_CI = quantile(.fitted, 0.975)) %>%
ungroup() %>%
merge(., preds, by = 'K')%>%
mutate(treatment=factor(df.treatment),
rate.type=factor(df.rate.type))
All.CI<<-rbind(All.CI, preds)
}
mult.fit.curves(K2.DF.GP.T1)
mult.fit.curves(K2.df.GP.T1)
mult.fit.curves(K2.df.GP.T1)
library(ggplot2)
library(nls.multstart)
library(broom)
library(purrr)
library(plyr)
library(dplyr)
library(boot)
mult.fit.curves(K2.df.GP.T1)
?mege
?merge
library(data.table)
library(data.table)
All.fittedT<-data.frame()#create an empty df to fill with fitted values
All.CIT<-data.frame()#create an empty df. to fill with confidence intervals
mult.fit.curves<-function(Data){
fit2 <- nls_multstart(log.rate ~ schoolfield_high(lnc, E, Eh, Th, temp = K, Tc = 27),
data = Data,
iter = 500,
start_lower = c(lnc = -10, E = 0.1, Eh = 0.2, Th = 285),
start_upper = c(lnc = 10, E = 2, Eh = 5, Th = 330),
supp_errors = 'Y',
na.action = na.omit,
lower = c(lnc = -10, E = 0, Eh = 0, Th = 0))
#print(fit2)
preds <- augment(fit2)
Data%<>%
mutate(fitted=preds$.fitted,
residuals=preds$.resid)
All.fittedT<<-rbind(All.fittedT,Data)
fit_boots <- Data %>%
modelr::bootstrap(n = 10, id = 'boot_num') %>% #change the number for more straps
group_by(boot_num) %>%
mutate(fit = map(strap, ~nls_multstart(log.rate ~ schoolfield_high(lnc, E, Eh, Th, temp = K, Tc = 27),
data = data.frame(.),
iter = 100,
start_lower = c(lnc = -10, E = 0.1, Eh = 0.2, Th = 285),
start_upper = c(lnc = 10, E = 2, Eh = 5, Th = 330),
lower = c(lnc=-10, E=0, Eh=0, Th=0),
supp_errors = 'Y')
))
fit_boots
# get predictions
preds_boot <- fit_boots %>%
tidyr::  unnest(fit %>% map(augment)) %>%
ungroup()
new_preds <- Data %>%
do(., data.frame(K = seq(min(.$K), max(.$K), length.out = 250), stringsAsFactors = FALSE))
preds <- augment(fit2, newdata = new_preds)
df.genotype<-(Data$genotype[1])
df.rate.type<-(Data$rate.type[1])
df.treatment<-(Data$treatment[1])
preds <- fit_boots %>%
tidyr:: unnest(fit %>% map(augment, newdata = new_preds)) %>%
# group by each value of K and get quantiles
dplyr:: group_by(., K) %>%
summarise(lwr_CI = quantile(.fitted, 0.025),
upr_CI = quantile(.fitted, 0.975)) %>%
ungroup() %>%
merge(., preds, by = 'K')%>%
mutate(genotype=factor(df.genotype),
treatment=factor(df.treatment),
rate.type=factor(df.rate.type))
All.CIT<<-rbind(All.CIT, preds)
}
mult.fit.curves(K2.df.GP.T1)
View(All.fitted)
preds
fit_boots
